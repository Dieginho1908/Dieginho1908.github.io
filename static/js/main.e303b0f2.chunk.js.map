{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","name","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResulta","_this$props$resultado","resultado","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_min","temp_max","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prepState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e303b0f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    <a href=\"\"  className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nclass Formulario extends Component {\r\n    \r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n    \r\n\r\n    //Función búsqueda de clima\r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n\r\n        //leer Refs y crear el objeto\r\n        const respuesta = {\r\n            ciudad :  this.ciudadRef.current.value,\r\n            pais :  this.paisRef.current.value\r\n        }\r\n\r\n        this.props.datosConsulta(respuesta);\r\n        //enviar por props\r\n\r\n        //opcional reset\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input ref={this.ciudadRef} id=\"ciudad\" name=\"ciudad\" type=\"text\"/>\r\n                                <label htmlFor=\"ciudad\">Ciudad</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef} name=\"pais\" id=\"pais\">\r\n                                    <option value=\"\" defaultValue>-Elige un país-</option>\r\n                                    <option value=\"AR\" defaultValue>Argentina</option>\r\n                                    <option value=\"CO\" defaultValue>Colombia</option>\r\n                                    <option value=\"CR\" defaultValue>Costa Rica</option>\r\n                                    <option value=\"ES\" defaultValue>España</option>\r\n                                    <option value=\"US\" defaultValue>Estados Unidos</option>\r\n                                    <option value=\"MX\" defaultValue>México</option>\r\n                                    <option value=\"PE\" defaultValue>Perú</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">País</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\" name=\"\" id=\"\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction Error(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n          <div className=\"col s12 m6 offset-m3\">\r\n              <div className=\"card-panel red darken-m4 error\">\r\n                  {props.mensaje}\r\n              </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nclass Clima extends Component {\r\n    \r\n\r\n    mostrarResulta = () =>{\r\n\r\n        //obtener los datos de la consulta\r\n\r\n        const {name, weather,main} = this.props.resultado;\r\n\r\n        if(!name || !weather || !main) return null;\r\n\r\n        const kelvin = 273.15;\r\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const alt  = `clima de ${name}`;\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcon} alt={alt}/>\r\n                            </p>\r\n                            <p className=\"temperatura\">Min: {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                            <p className=\"temperatura\">Max: {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n    render() {\r\n       \r\n        return (\r\n            <div className=\"container\">\r\n                {this.mostrarResulta()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\n\nclass App extends Component {\n\n  state = {\n    error: false,\n    consulta: {},\n    resultado: {}\n  }\n\n  componentDidUpdate(prevProps, prepState) {\n    if(prepState.consulta !== this.state.consulta)\n    this.consultarApi();\n  }\n\n  consultarApi = () =>{\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n\n    const appId = '49166a92fa460c3e8f5dadcaf94891f6';\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${appId}`;\n\n    //query con fetch\n    fetch(url)\n      .then(respuesta =>{\n        //console.log(respuesta);\n        return respuesta.json();\n      })\n      .then(datos =>{\n        this.setState({\n          resultado:datos\n        })\n        \n      })\n      .catch(error =>{\n        console.log(error)\n      })\n    //leer la url y agregar el API key\n\n    //consultar con fetch\n\n  }\n\n  datosConsulta = respuesta => {\n\n    if(respuesta.ciudad === \"\" || respuesta.pais ===\"\"){\n      console.log('Hay errores');\n      this.setState ({\n        error: true\n      })\n       \n      \n    }else{\n      //console.log('Todo correcto')\n\n      this.setState({\n        error: false,\n        consulta: respuesta\n      })\n    }\n  }\n  render() {\n\n    const error = this.state.error;\n    const {cod} = this.state.resultado;\n\n    let resultado;\n\n    if(error){\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    }else if(cod === \"404\"){\n      resultado = <Error mensaje=\"Ciudad no encontrada\" />\n    }\n    else{\n      resultado = <Clima \n        resultado={this.state.resultado}\n      ></Clima>\n    }\n    return (\n      <div className=\"app\">\n        <Header\n          titulo={'Clima React'}\n        ></Header>\n        <Formulario\n        \n        datosConsulta={this.datosConsulta}>\n\n        </Formulario>\n        {resultado}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}